[{"title":"软件设计师（软考）13年上半年上午25题26题进程资源图","date":"2023-03-30T13:01:25.940Z","path":"2023/03/30/软件设计师（软考）13年上半年上午25题进程资源图/","content":"<h2 id=\"软件设计师（软考）13年上半年上午25题26题进程资源图\"><a href=\"#软件设计师（软考）13年上半年上午25题26题进程资源图\" class=\"headerlink\" title=\"软件设计师（软考）13年上半年上午25题26题进程资源图\"></a>软件设计师（软考）13年上半年上午25题26题进程资源图</h2><p><img src=\"E:\\MyWebsite\\source_posts\\img\\软件设计师笔记图片\\1.png\" alt=\"1\"></p>\n<h5 id=\"一、资源进程图的化简与判断死锁问题\"><a href=\"#一、资源进程图的化简与判断死锁问题\" class=\"headerlink\" title=\"一、资源进程图的化简与判断死锁问题\"></a>一、资源进程图的化简与判断死锁问题</h5><p>做这种题目首先我们要先明白一句话：资源先分配，然后进程再请求。</p>\n<p>倘若资源中没有资源，那么进程则无法请求到，那么就会出现阻塞状态。</p>\n<p>并且资源分配与请求不能够只是简单的相互抵消。</p>\n<h5 id=\"二、通过此题目进行理解\"><a href=\"#二、通过此题目进行理解\" class=\"headerlink\" title=\"二、通过此题目进行理解\"></a>二、通过此题目进行理解</h5><h6 id=\"我们首先先观察图（a）\"><a href=\"#我们首先先观察图（a）\" class=\"headerlink\" title=\"我们首先先观察图（a）\"></a>我们首先先观察图（a）</h6><p><img src=\"E:\\MyWebsite\\source_posts\\img\\软件设计师笔记图片\\image-20230328203405651.png\" alt=\"image-20230328203405651\"></p>\n<p>首先R1先分配资源，R1一次性将自己的资源全部分配出去了，R1先把资源分配给了P1和P2，导致R1中现在并不存在资源，这时候P2向R1中申请资源，但是由于R1中并没有资源，导致P2一直在等待R1中有资源。所以这时候P2是处于阻塞状态。</p>\n<p>接下来观察R2，R2同样一次性将自己的资源全部分配出去了，导致R2中并没有资源，这也就导致P1向R2请求资源同样请求不到，所以P1也处于阻塞状态。</p>\n<p>所以我们现在发现P1，P2两个进程都处于阻塞状态。那么图（a）这个图就出现了死锁的情况，所以的资源和进程都处理不了。一整个图都不能进行任何化简。（化简其实就是把图中一些线给消去。）</p>\n<p>所以25题我们选择B</p>\n<h6 id=\"接下来我们来观察图（b）\"><a href=\"#接下来我们来观察图（b）\" class=\"headerlink\" title=\"接下来我们来观察图（b）\"></a>接下来我们来观察图（b）</h6><p><img src=\"E:\\MyWebsite\\source_posts\\img\\软件设计师笔记图片\\image-20230328204430187.png\" alt=\"image-20230328204430187\"></p>\n<p>还是和图（a）中的分析一样的。资源先分配，然后进程再去请求。</p>\n<p>先看到R1中，R1先分配，将自己的两个资源一次性全部分配出去了，R1中就没有资源了，这个时候P2来请求R1中的资源请求不到，所以P2现在处于阻塞状态。<br>然后我们现在来看R2，R2先是把自己的资源分配了两个出去，一个给了P2，一个给了P3，自己本身还存在一个资源，这个时候P1来请求R2的一个资源，就能够请求的到，然后P1成功将请求R2资源的那条线消去了，然后P1就能够去处理R1所分配过来的一个资源，处理完成之后，P1就将R1所分配过来的资源归还回去，这个时候R1就有一个资源了。<br>那么一直处于阻塞状态的P2发现R1有了一个资源之后，立刻就能够请求到了，然后将R1中的一个资源拿了过来，P2的请求就结束了，并且再处理完之后将资源归还回去，然后就能够处理R2所分配过来的资源，然后再将R2所分配过来的资源归还回去。<br>完成了上述操作之后，R2中就有两个资源，这时P3来请求一个资源就肯定能够请求的到。并且将分配来的资源处理掉。</p>\n<p>完成一系列操作之后，整张图的线就已经全部消除了。这就是成功化简了，并且没有一个地方出现无法执行的状态，也就是没有出现死锁状态，所以26题我们选择C</p>\n<h6 id=\"图b图解\"><a href=\"#图b图解\" class=\"headerlink\" title=\"图b图解\"></a>图b图解</h6><p>上面可能有些啰嗦，我们用图解直观的来看一下</p>\n<p>1、先是原图</p>\n<p><img src=\"E:\\MyWebsite\\source_posts\\img\\软件设计师笔记图片\\2.png\" alt=\"image-20230328210719632\"></p>\n<p>2、首先分配完成之后，P2去申请R1，发现并能够申请的到，所以P2处于阻塞状态</p>\n<p><img src=\"E:\\MyWebsite\\source_posts\\img\\软件设计师笔记图片\\3.png\" alt=\"image-20230328210836218\"></p>\n<p>3、这个时候由于R2中有一个资源，所以P1能够申请的到，并且将R1分配来的资源处理掉，所以R1中就有一个资源了。这个时候就化简了P1。</p>\n<p><img src=\"E:\\MyWebsite\\source_posts\\img\\软件设计师笔记图片\\image-20230328211210420.png\" alt=\"image-20230328211210420\"></p>\n<p>4、这个时候P2就发现了他所申请的R1中有一个资源了，所以阻塞状态解除，并且向R1申请到了资源，并且处理掉R2所分配过来的资源。R2中就有两个资源了。这个时候就化简了P2。</p>\n<p><img src=\"E:\\MyWebsite\\source_posts\\img\\软件设计师笔记图片\\image-20230328211325506.png\" alt=\"image-20230328211325506\"></p>\n<p>5、最后R3向R2中请求资源，并且能够请求的到，请求处理完成之后，再去做所分配过来的资源，然后P3也就孤立了，并且将所分配来的资源返还回去，所以R1中有2个资源，R2中有3个资源。</p>\n<p><img src=\"E:\\MyWebsite\\source_posts\\img\\软件设计师笔记图片\\image-20230328211631693.png\" alt=\"image-20230328211631693\"></p>\n<p>6、最后完成图像所有操作。</p>\n","excerpt":"","categories":[],"tags":[]},{"title":"Hello World","date":"2023-03-30T12:15:05.803Z","path":"2023/03/30/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","categories":[],"tags":[]},{"title":"指针与二级指针的理解","date":"2023-03-28T01:23:47.271Z","path":"2023/03/28/指针与二级指针的理解/","content":"<h2 id=\"指针与二级指针的理解\"><a href=\"#指针与二级指针的理解\" class=\"headerlink\" title=\"指针与二级指针的理解\"></a>指针与二级指针的理解</h2><h5 id=\"一、一句话理解什么是指针\"><a href=\"#一、一句话理解什么是指针\" class=\"headerlink\" title=\"一、一句话理解什么是指针\"></a>一、一句话理解什么是指针</h5><p>指针存放的是数据变量的地址，目的是为了指向数据所在的位置。</p>\n<h5 id=\"二、理解二级指针\"><a href=\"#二、理解二级指针\" class=\"headerlink\" title=\"二、理解二级指针\"></a>二、理解二级指针</h5><p>二级指针同样也是指向地址，只不过是指向某一个指针的地址。也就是指向指针的指针。所以以此类推，同样拥有三级指针和更高级的指针。</p>\n<h5 id=\"三、二级指针的作用是什么\"><a href=\"#三、二级指针的作用是什么\" class=\"headerlink\" title=\"三、二级指针的作用是什么\"></a>三、二级指针的作用是什么</h5><p>在我看来，二级指针用的地方是在函数当中，当一个函数需要对所传进来的指针的本身进行操作的话，就需要使用到二级指针。这里面就涉及到了局部变量和作用域的一个概念。</p>\n<h5 id=\"四、代码演示\"><a href=\"#四、代码演示\" class=\"headerlink\" title=\"四、代码演示\"></a>四、代码演示</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">change</span><span class=\"params\">(<span class=\"type\">int</span> *p,<span class=\"type\">int</span> *q)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp = *p;</span><br><span class=\"line\">    *p = *q;</span><br><span class=\"line\">    *q = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">change2</span><span class=\"params\">(<span class=\"type\">int</span> **p,<span class=\"type\">int</span> **q)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>* temp = *p;</span><br><span class=\"line\">    *p = *q;</span><br><span class=\"line\">    *q = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a=<span class=\"number\">10</span>,b=<span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span>*p,*q;</span><br><span class=\"line\">    p = &amp;a;</span><br><span class=\"line\">    q = &amp;b;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*p=%d,p=%d\\t*q=%d,q=%d\\n&quot;</span>,*p,p,*q,q);</span><br><span class=\"line\">    <span class=\"comment\">//    *p=10,p=6356636 *q=20,q=6356632</span></span><br><span class=\"line\">    change(p,q);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*p=%d,p=%d\\t*q=%d,q=%d\\n&quot;</span>,*p,p,*q,q);</span><br><span class=\"line\">    <span class=\"comment\">//    *p=20,p=6356636 *q=10,q=6356632</span></span><br><span class=\"line\">    change2(&amp;p,&amp;q);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*p=%d,p=%d\\t*q=%d,q=%d\\n&quot;</span>,*p,p,*q,q);</span><br><span class=\"line\">    <span class=\"comment\">//    *p=10,p=6356632 *q=20,q=6356636</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>先创建两个指针</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a=<span class=\"number\">10</span>,b=<span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> *p,*q;</span><br><span class=\"line\">p = &amp;a;</span><br><span class=\"line\">q = &amp;b;</span><br></pre></td></tr></table></figure>\n\n<p>使用一级指针</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">change</span><span class=\"params\">(<span class=\"type\">int</span> *p,<span class=\"type\">int</span> *q)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp = *p;</span><br><span class=\"line\">    *p = *q;</span><br><span class=\"line\">    *q = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*p=%d,p=%d\\t*q=%d,q=%d\\n&quot;</span>,*p,p,*q,q);</span><br><span class=\"line\"><span class=\"comment\">//    *p=10,p=6356636 *q=20,q=6356632</span></span><br><span class=\"line\">change(p,q);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*p=%d,p=%d\\t*q=%d,q=%d\\n&quot;</span>,*p,p,*q,q);</span><br><span class=\"line\"><span class=\"comment\">//    *p=20,p=6356636 *q=10,q=6356632</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以发现，使用一级指针我们可以做到指针所指向的内容进行交换，但是并不能做到对指针本身进行交换。这就会出现一个问题，我们学到的数据结构链式表里面，有时候需要用到指针，但是只是通过一级指针我们不能够做到将指针进行交换。</p>\n<p>接下来我们再来看一下二级指针</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">change2</span><span class=\"params\">(<span class=\"type\">int</span> **p,<span class=\"type\">int</span> **q)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>* temp = *p;</span><br><span class=\"line\">    *p = *q;</span><br><span class=\"line\">    *q = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*p=%d,p=%d\\t*q=%d,q=%d\\n&quot;</span>,*p,p,*q,q);</span><br><span class=\"line\"><span class=\"comment\">//    *p=10,p=6356636 *q=20,q=6356632</span></span><br><span class=\"line\">change(p,q);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*p=%d,p=%d\\t*q=%d,q=%d\\n&quot;</span>,*p,p,*q,q);</span><br><span class=\"line\"><span class=\"comment\">//    *p=20,p=6356636 *q=10,q=6356632</span></span><br><span class=\"line\">change2(&amp;p,&amp;q);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*p=%d,p=%d\\t*q=%d,q=%d\\n&quot;</span>,*p,p,*q,q);</span><br><span class=\"line\"><span class=\"comment\">//    *p=10,p=6356632 *q=20,q=6356636</span></span><br></pre></td></tr></table></figure>\n\n<p>在二级指针操作中，我们成功交换了一级指针，并且同样一级所指向的内容同样也进行了交换。这就可以让我们在进行数据结构中的链式存储中进行交换指针了。</p>\n<p>以上是我对指针的理解。目前还在学习中，如有问题，请各位指出。</p>\n","excerpt":"","categories":[],"tags":[]}]